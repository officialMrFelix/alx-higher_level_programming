# 0-add_integer.txt

==============================
HOW TO USE 0-add_integer.py
==============================

This module defines an integer addition function ``add_integer(a, b=98)``.

Usage
=====

``add_integer(...)``` returns the addition of its two arguments. For numbers,
that value is equivalent to using the ``+`` operators.

::

	>>> add_integer = __import__("0-add_integer").add_integer
	>>> add_integer(1, 4)
	5

::

	add_integer(2, -3)
	-1

The function also works with floating-point values.

::

	>>> add_integer(2.0, 4.0)
	6

Note that floats are casted to ints before addition is performed.

::

	>>> add_integer(3.7, 0.9)
	3

::

	>>> add_integer(-3.7, 0.9)
	-3

Floating and non-floating point values can be combined.

::

	>>> add_integer(2.3, -3)
	-1

The second argument has a default value of 98.

::

	>>> add_integer(2)
	100

Non-Numbers
===========

``add_integers()`` expects that both arguments are either integers or floats.
If either argument is not an expected type, a TypeError is raised:

::

	>>> add_integer("hello", 3)
	Traceback (most recent call last):
	TypeError: a must be an integer

::

	>>> add_integer(2, "hello")
	Traceback (most recent call last):
	TypeError: b must be an integer

::

	>>> add_integer(None)
	Traceback (most recent call last):
	TypeError: a must be an integer

::

	>>> add_integer(2.1, None)
	Traceback (most recent call last):
	TypeError: b must be an integer

If both arguments are non-integers and non-floats, a TypeError message is printed for the first argument only.

::

	>>> add_integer("hello", "there")
	Traceback (most recent call last):
	TypeError: a must be an integer

The function will fail if infinity is provided.

::

	>>> add_integer(float('inf')) #doctest: +ELLIPSIS
	Traceback (most recent call last):
	...
	OverflowError: cannot convert float infinity to integer

::

	>>> add_integer(2, float('inf')) #doctest: +ELLIPSIS
	Traceback (most recent call last):
	  ...
	OverflowError: cannot convert float infinity to integer

And again with NaN numbers.

::

	>>> add_integer(float('nan'))
	Traceback (most recent call last):
	ValueError: cannot convert float NaN to integer

::

	>>> add_integer(2, float('nan'))
	Traceback (most recent call last):
	ValueError: cannot convert float NaN to integer

